#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'parallel'
require 'fileutils'
require 'ruby-progressbar'

require './lib/helper'
require './lib/newick'
require './lib/multi_io'
require './lib/numeric'
require './lib/array'
require './lib/hash'
require './lib/partition_array'


class SiteDependencies < Thor
  desc "generate", "generate site dependencies graph for one partition of one tree"
  option :tree_file, :required => true, :aliases => "-t",
         :desc => "Which tree should be analyzed " \
                  "Example: '-t ./data/59/parsimony_trees/RAxML_result.T4.RUN.0' "
  option :partition_file, :required => true, :aliases => "-p",
         :desc => "Path to partition file " \
                  "Example: '-p ./data/59/59.partitions' "
  option :phylip_file, :required => true, :aliases => "-l",
         :desc => "Path to phylip file " \
                  "Example: '-l ./data/59/59.phy' "
  option :choose_partition, :type => :numeric, :default => 0, :aliases => "-c",
         :desc => "Choose which partition should be plotted. " \
                  "Example: '-c 3' "
  option :crop_sites, :type => :numeric, :default => 10, :aliases => "-r",
         :desc => "Crop partiton to x sites. " \
                  "Example: '-r 30' "

  def generate

    # Initialize
    partition_file = options[:partition_file]
    phylip_file = options[:phylip_file]
    sample_root = "midpoint" # Hard coded because it's the reasonable choice
    start_time = Time.now
    csv_output = []
    partitions = PartitionArray.from_file(partition_file)
    number_of_taxa, number_of_sites, phylip_data = read_phylip(phylip_file)


    # Drop identical sites
    unless partition_file.include?("uniq")
      number_of_sites, partitions, phylip_data, partition_file, phylip_file =
          drop_unique_sites(partitions, phylip_data, partition_file, phylip_file, number_of_taxa)
    end

    puts "Program started at #{start_time}"
    puts "Using parameters: Tree files: #{options[:batches]}; " \
         "Partition file: #{partition_file}; Phylip File: #{phylip_file}; " \
         "Sample root nodes: #{sample_root}; Sample trees: #{options[:sample_trees]}; " \
         "Number of taxa: #{number_of_taxa}; Number of sites: #{number_of_sites}; " \
         "Number of partitions: #{partitions.size}"


    # Get data
    tree = NewickTree.fromFile(options[:tree_file])
    tree = tree.add_dna_sequences(phylip_data)

    # Midpoint root
    tree = tree.set_edge_length.midpoint_root

    # Select partition based on user input
    partition = partitions.list[options[:choose_partition]]
    puts "Using partition named '#{partition.name}'"
    # Crop sites
    partition = partition.crop(options[:crop_sites]) if options[:crop_sites] < partition.sites.size

    tree.ml_operations(partition.sites)
    site_dependencies_data = tree.get_site_dependencies

    # Edges for the site dependency graph
    site_dependencies_data[:edges].each do |key, value|
      csv_output << { from: key[0], to: key[1], weight: value}
    end



    program_runtime = (Time.now - start_time).duration

    # Check if output folder exists
    output_directory = "./output_#{File.basename(__FILE__, ".rb")}"
    FileUtils.mkdir_p(output_directory)

    # Output results to CSV for R
    data_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} data.csv"
    puts "Writing data to #{data_file}"
    csv_output.array_of_hashes_to_csv_file(data_file)


    # Output parameters to CSV for R
    graph_file_name = "graphs/#{phylip_file.scan(/(\w+)\//).join("-")} #{start_time.strftime "%Y-%m-%d %H-%M-%S"}"
    program_parameters_output = {tree_file: options[:tree_file],
                                 number_of_taxa: number_of_taxa, number_of_sites: number_of_sites,
                                 partition_name: partition.name,
                                 crop_sites: partition.sites.size,
                                 program_runtime: program_runtime, data_file: data_file,
                                 graph_file_name: graph_file_name}

    parameter_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} parameters.csv"
    program_parameters_output.to_csv_file(parameter_file)
    puts "Program parameters written to #{parameter_file}"
    puts "Run corresponding R script '#{File.basename(__FILE__, ".rb")}.R' to generate graphs"

    puts "Program finished at #{Time.now}. Runtime: #{program_runtime}"

  end

end

SiteDependencies.start