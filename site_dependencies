#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'parallel'
require 'fileutils'
require 'ruby-progressbar'

require './lib/helper'
require './lib/newick'
require './lib/multi_io'
require './lib/numeric'
require './lib/array'
require './lib/hash'


class SiteDependencies < Thor
  desc "generate", "generate site dependencies distribution for RAxML output"
  option :batches, :type => :hash, :required => true, :aliases => "-b",
         :desc => "Which batches of trees you want to compare. " \
                  "Example: '-b pars:./data/7/parsimony_trees/*parsimonyTree* rand_ml:./data/7/random_trees/*result*' "
  option :partition_file, :required => true, :aliases => "-p",
         :desc => "Path to partition file " \
                  "Example: '-p ./data/7/7.partitions' "
  option :phylip_file, :required => true, :aliases => "-l",
         :desc => "Path to phylip file " \
                  "Example: '-l ./data/7/7.phy' "
  option :sample_trees, :default => 1, :aliases => "-t",
         :desc => "Enter the amount of trees that should be used for statistics. Enter 'all' for all trees. " \
                  "Example: '-t 12' "

  def generate

    # Initialize
    partition_file = options[:partition_file]
    phylip_file = options[:phylip_file]
    sample_root = "midpoint" # Hard coded because it's the reasonable choice
    start_time = Time.now
    csv_site_dependencies = []
    csv_graph_nodes = []
    csv_graph_edges = []
    partitions = read_partitions(partition_file)
    number_of_taxa, number_of_sites, phylip_data = read_phylip(phylip_file)


    # Drop identical sites
    unless partition_file.include?("uniq")
      number_of_sites, partitions, phylip_data, partition_file, phylip_file =
          drop_unique_sites(partitions, phylip_data, partition_file, phylip_file, number_of_taxa)
    end

    puts "Program started at #{start_time}"
    puts "Using parameters: Tree files: #{options[:batches]}; " \
         "Partition file: #{partition_file}; Phylip File: #{phylip_file}; " \
         "Sample root nodes: #{sample_root}; Sample trees: #{options[:sample_trees]}; " \
         "Number of taxa: #{number_of_taxa}; Number of sites: #{number_of_sites}; " \
         "Number of partitions: #{partitions.size}; Number of processes: #{options[:number_of_processes]}"


    options[:batches].each do |batch_name, batch_path|

      # Shall we sample the trees
      list_of_trees = if options[:sample_trees] == "all"
                        Dir.glob(batch_path)
                      else
                        Dir.glob(batch_path).first(options[:sample_trees].to_i)
                      end
      list_of_trees.each do |file|

        # Get data
        puts "Processing file: #{file}"
        tree = NewickTree.fromFile(file)
        tree = tree.add_dna_sequences(phylip_data)

        # Midpoint root
        tree = tree.set_edge_length.midpoint_root

        # Iterate over all partitions
        partitions.each do |partition_name, partition_range|

          result = tree.ml_operations(partition_range)

          site_dependencies_data = tree.get_site_dependencies

          # If a site has zero dependencies it will not be present in the hash, but still return 0 since we initialized the Hash with the value 0.
          # That's why we iterate over all sites of the partition_range instead of all elements of site_dependencies_data[:dependencies_count].
          partition_range.each do |site_index|
            csv_site_dependencies << {batch: batch_name, tree: file, partition: partition_name,
                            site: site_index, count: site_dependencies_data[:dependencies_count][site_index]}
            # Nodes for the site dependency graph
            csv_graph_nodes << {batch: batch_name, tree: file, partition: partition_name, node: site_index}
          end

          # Edges for the site dependency graph
          site_dependencies_data[:edges].each do |key, value|
            csv_graph_edges << { batch: batch_name, tree: file, partition: partition_name,
                                 edge: key, weight: value }
          end



        end
      end

    end


    program_runtime = (Time.now - start_time).duration

    # Check if output folder exists
    output_directory = "./output_#{File.basename(__FILE__, ".rb")}"
    FileUtils.mkdir_p(output_directory)

    # Output results to CSV for R
    data_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} data.csv"
    puts "Writing data to #{data_file}"
    csv_site_dependencies.flatten.array_of_hashes_to_csv_file(data_file)

    edges_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} edges.csv"
    puts "Writing data to #{edges_file}"
    csv_graph_edges.flatten.array_of_hashes_to_csv_file(edges_file)

    nodes_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} nodes.csv"
    puts "Writing data to #{nodes_file}"
    csv_graph_nodes.flatten.array_of_hashes_to_csv_file(nodes_file)


    # Output parameters to CSV for R
    graph_file_name = "graphs/#{phylip_file.scan(/(\w+)\//).join("-")} #{start_time.strftime "%Y-%m-%d %H-%M-%S"}"
    program_parameters_output = {phylip_file: phylip_file,
                                 sample_root: sample_root,
                                 sample_trees: options[:sample_trees],
                                 number_of_partitions: partitions.size,
                                 number_of_taxa: number_of_taxa, number_of_sites: number_of_sites,
                                 program_runtime: program_runtime, data_file: data_file,
                                 edges_file: edges_file, nodes_file: nodes_file,
                                 graph_file_name: graph_file_name}

    parameter_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} parameters.csv"
    program_parameters_output.to_csv_file(parameter_file)
    puts "Program parameters written to #{parameter_file}"
    puts "Run corresponding R script '#{File.basename(__FILE__, ".rb")}.R' to generate graphs"

    puts "Program finished at #{Time.now}. Runtime: #{program_runtime}"

  end

end

SiteDependencies.start