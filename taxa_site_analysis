#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'fileutils'
require 'ruby-progressbar'

require './lib/helper'
require './lib/newick'
require './lib/multi_io'
require './lib/numeric'
require './lib/array'
require './lib/hash'
require './lib/partition_array'


class OptimalSolution < Thor
  desc "generate", "analyze effect of number of taxa and site on savings for one tree"
  option :tree_file, :required => true, :aliases => "-t",
         :desc => "Which tree should be analyzed " \
                  "Example: '-t ./data/59/parsimony_trees/RAxML_result.T4.RUN.0' "
  option :partition_file, :required => true, :aliases => "-p",
         :desc => "Path to partition file " \
                  "Example: '-p ./data/59/59.partitions' "
  option :phylip_file, :required => true, :aliases => "-l",
         :desc => "Path to phylip file " \
                  "Example: '-l ./data/59/59.phy' "
  option :crop_partitions, :type => :numeric, :default => 3, :aliases => "-n",
         :desc => "Crop the datafile to x partitions. " \
                  "Example: '-n 3' "
  option :crop_sites_start, :type => :numeric, :default => 10, :aliases => "-s",
         :desc => "Run analysis for x to y sites. " \
                  "Example: '-s 10 -e 20' "
  option :crop_sites_end, :type => :numeric, :default => 80, :aliases => "-e",
         :desc => "Run analysis for x to y sites. " \
                  "Example: '-s 10 -e 20' "
  option :drop_taxa_per_partition, :type => :numeric, :default => 1, :aliases => "-d",
         :desc => "Drop x taxa from full tree. " \
                  "Example: '-d 20' "

  def generate

    # Initialize
    partition_file = options[:partition_file]
    phylip_file = options[:phylip_file]
    sample_root = 'midpoint'
    start_time = Time.now
    partitions = PartitionArray.from_file(partition_file)
    number_of_taxa, number_of_sites, phylip_data = read_phylip(phylip_file)
    graph_file_name = "graphs/#{phylip_file.scan(/(\w+)\//).join("-")} #{start_time.strftime "%Y-%m-%d %H-%M-%S"}"

    # Drop identical sites
    unless partition_file.include?("uniq")
      number_of_sites, partitions, phylip_data, partition_file, phylip_file =
          drop_unique_sites(partitions, phylip_data, partition_file, phylip_file, number_of_taxa)
    end

    puts "Program started at #{start_time}"
    puts "Using parameters: Tree file: #{options[:tree_file]}; " \
         "Partition file: #{partition_file}; Phylip File: #{phylip_file}; " \
         "Sample root nodes: #{sample_root}; " \
         "Number of taxa: #{number_of_taxa}; Number of sites: #{number_of_sites}; " \
         "Number of partitions: #{partitions.size}"


    # Get data
    tree = NewickTree.fromFile(options[:tree_file])
    tree = tree.add_dna_sequences(phylip_data)

    # Midpoint root
    tree = tree.set_edge_length.midpoint_root

    # Initialize
    tree_output = []

    # TODO: Tree needs to have at least 4 taxa. Otherwise we cannot crop
    max_drop_taxa = if options[:drop_taxa_per_partition] > number_of_taxa - 4
                      number_of_taxa - 4
                    else
                      options[:drop_taxa_per_partition]
                    end
    progressbar = ProgressBar.create(:format => '%t: %a |%b %i| %p%% %e', :title => "Iterating over #{max_drop_taxa} taxa", :total => max_drop_taxa)
    max_drop_taxa.times do |number_of_dropped_taxa|

      # Crop Taxa
      tree = tree.drop_taxon
      #tree = tree.set_edge_length.midpoint_root

      # TODO: Verify reasonable input parameters
      (options[:crop_sites_start]..options[:crop_sites_end]).each do |crop_sites|
        # Crop partition + sites
        partitions.each_with_index do |partition, partition_index|
          next if partition_index >= options[:crop_partitions]
          next if crop_sites > partition.sites.size
          result = tree.ml_operations(partition.sites.first ... partition.sites.first + crop_sites)

          tree_output << { tree: options[:tree_file],
                           partition: partition.name,
                           operations_maximum: result[:op_maximum], operations_optimized: result[:op_optimized],
                           ratio_of_savings: result[:op_savings],
                           number_of_sites: crop_sites, number_of_taxa: number_of_taxa - number_of_dropped_taxa }
        end
      end

      # Progressbar
      progressbar.increment

    end


    program_runtime = (Time.now - start_time).duration

    # Check if output folder exists
    output_directory = "./output_#{File.basename(__FILE__, ".rb")}"
    FileUtils.mkdir_p(output_directory)

    # Output results to CSV for R
    data_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} data.csv"
    puts "Writing data to #{data_file}"
    tree_output.array_of_hashes_to_csv_file(data_file)


    # Output parameters to CSV for R
    program_parameters_output = { phylip_file: phylip_file, sample_root: sample_root,
                                  program_runtime: program_runtime, data_file: data_file,
                                  graph_file_name: graph_file_name}

    parameter_file = "#{output_directory}/#{start_time.strftime "%Y-%m-%d %H-%M-%S"} parameters.csv"
    program_parameters_output.to_csv_file(parameter_file)
    puts "Program parameters written to #{parameter_file}"
    puts "Run corresponding R script '#{File.basename(__FILE__, ".rb")}.R' to generate graphs"

    puts "Program finished at #{Time.now}. Runtime: #{program_runtime}"

  end

end

OptimalSolution.start
