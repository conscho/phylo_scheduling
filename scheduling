#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'parallel'
require 'fileutils'
require 'pp'
require 'ruby-progressbar'

require './lib/helper'
require './lib/newick'
require './lib/multi_io'
require './lib/numeric'
require './lib/array'
require './lib/hash'
require './lib/bin_array'
require './lib/partition_array'


class Scheduling < Thor
  desc "generate", "schedule partitions on bins considering subtree repeats for one tree"
  option :tree_file, :required => true, :aliases => "-t",
         :desc => "Which tree should be used " \
                  "Example: '-t ./data/59/parsimony_trees/RAxML_result.T4.RUN.0' "
  option :partition_file, :required => true, :aliases => "-p",
         :desc => "Path to partition file " \
                  "Example: '-p ./data/59/59.partitions' "
  option :phylip_file, :required => true, :aliases => "-l",
         :desc => "Path to phylip file " \
                  "Example: '-l ./data/59/59.phy' "
  option :number_of_bins, :type => :numeric, :default => 2, :aliases => "-n",
         :desc => "Number of bins that the sites should be distributed to. " \
                  "Example: '-n 3' "
  option :heuristic, :type => :numeric, :default => 0, :aliases => "-h",
         :desc => "Which heuristic should be used: 0 = slicing based on sites; 1 = slicing based on operations. " \
                  "Example: '-h 1' "
  option :optimize, :type => :numeric, :default => 20, :aliases => "-o",
         :desc => "Whether the result should be optimized after generation. Enter the number of repeats. " \
                  "Example: '-o 20' "
  option :number_of_processes, :type => :numeric, :default => 0, :aliases => "-P",
         :desc => "Parallel processing on 'x' cores. If 0 multithreading is disabled. [Not implemented]" \
                  "Example: '-P 2' "

  def generate

    # Initialize
    partition_file = options[:partition_file]
    phylip_file = options[:phylip_file]
    sample_root = 'midpoint'
    heuristic_option = ["sites", "operations"]
    start_time = Time.now
    partitions = PartitionArray.from_file(partition_file)
    number_of_taxa, number_of_sites, phylip_data = read_phylip(phylip_file)
    graph_file_name = "graphs/#{phylip_file.scan(/(\w+)\//).join("-")} #{start_time.strftime "%Y-%m-%d %H-%M-%S"}"

    # Drop identical sites
    unless partition_file.include?("uniq")
      number_of_sites, partitions, phylip_data, partition_file, phylip_file =
          drop_unique_sites(partitions, phylip_data, partition_file, phylip_file, number_of_taxa)
    end

    puts "Program started at #{start_time}"
    puts "Using parameters: Tree file: #{options[:tree_file]}; " \
         "Partition file: #{partition_file}; Phylip File: #{phylip_file}; " \
         "Sample root nodes: #{sample_root}; " \
         "Number of taxa: #{number_of_taxa}; Number of sites: #{number_of_sites}; " \
         "Number of partitions: #{partitions.size}"


    # Get data
    tree = NewickTree.fromFile(options[:tree_file])
    tree = tree.add_dna_sequences(phylip_data)

    # Midpoint root
    tree = tree.set_edge_length.midpoint_root

    # Get partition sizes
    partitions.ml_operations!(tree)

    # Initialize bin list
    bins = BinArray.new(options[:number_of_bins])

    # Set bin target size for sliding window heuristic
    bins.set_bin_target_op_size!(partitions.op_optimized_size)
    bins.set_bin_target_sites_size!(partitions.total_sites)

    # Sort partitions by op_optimized
    partitions.sort!

    # Initial fill: Fill sorted partitions into bins as far as possible without breaking the partitions
    remaining_partitions = bins.initial_fill(partitions)
    puts "Remaining partitions: #{remaining_partitions}"
    puts "Current bin distribution: #{bins}"


    ## Slicing heuristic
    bins = bins.slice_fill(remaining_partitions, heuristic_option[options[:heuristic]])
    bins.ml_operations!(tree)
    puts "Current bin distribution: #{bins}"
    puts "Current bin distribution: #{bins.to_s("fill_level")}"

    # Simple Optimization
    options[:optimize].times do
      bins.slide_distribution!
      bins.ml_operations!(tree)
      puts "Current bin distribution: #{bins.to_s("fill_level")}"
    end
    puts "Current bin distribution: #{bins}"


  end

end

Scheduling.start
