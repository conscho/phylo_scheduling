#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'parallel'
require 'fileutils'
require 'pp'
require 'ruby-progressbar'
#require 'Newick' # Some problem with including the forked gem
require 'require_all'
require 'deep_clone'
#require 'stackprof' # Used for profiling
require 'matrix'

require_all 'lib'


class Sorting < Thor
  desc 'generate', 'Empirical proof for sorting effect on RAxML output trees'
  option :batches, :type => :hash, :required => true, :aliases => "-b",
         :desc => "Which batches of trees you want to compare. " \
                  "Example: '-b pars:./data/7/parsimony_trees/*parsimonyTree* rand_ml:./data/7/random_trees/*result*' "
  option :partition_file, :required => true, :aliases => '-p',
         :desc => 'Path to partition file ' \
                  "Example: '-p ./data/59/59.partitions' "
  option :phylip_file, :required => true, :aliases => '-l',
         :desc => 'Path to phylip file ' \
                  "Example: '-l ./data/59/59.phy' "
  option :number_of_processes, :type => :numeric, :default => 2, :aliases => "-P",
         :desc => "Parallel processing on 'x' cores. If 0 multithreading is disabled. " \
                  "Example: '-P 4' "
  option :sample_trees, :default => 100, :aliases => "-t",
         :desc => "Enter the amount of trees that should be used for statistics. Enter 'all' for all trees. " \
                  "Example: '-t 12' "



  def generate

    # Initialize
    partition_file = options[:partition_file]
    phylip_file = options[:phylip_file]
    sample_root = 'midpoint'
    csv_output = []
    start_time = Time.now
    partitions = PartitionArray.from_file(partition_file)
    number_of_taxa, number_of_sites, phylip_data = read_phylip(phylip_file)
    graph_file_name = "graphs/#{phylip_file.scan(/(\w+)\//).join('-')} #{start_time.strftime '%Y-%m-%d %H-%M-%S'}"

    puts "Program started at #{start_time}"

    # Drop identical sites
    unless partition_file.include?('uniq')
      number_of_sites, partitions, phylip_data, partition_file, phylip_file =
          drop_unique_sites(partitions, phylip_data, partition_file, phylip_file, number_of_taxa)
    end

    puts "Using parameters: tree_file: #{options[:batches]}; " \
         "Partition file: #{partition_file}; Phylip File: #{phylip_file}; " \
         "Sample root nodes: #{sample_root}; Sample trees: #{options[:sample_trees]}; " \
         "Number of taxa: #{number_of_taxa}; Number of sites: #{number_of_sites}; " \
         "Number of partitions: #{partitions.size}; Running on #{options[:number_of_processes]} processors"

    options[:batches].each do |batch_name, batch_path|

      # Shall we sample the trees
      list_of_trees = if options[:sample_trees] == "all"
                        Dir.glob(batch_path)
                      else
                        Dir.glob(batch_path).first(options[:sample_trees].to_i)
                      end


      csv_output << Parallel.map(list_of_trees, :in_processes => options[:number_of_processes]) do |file|

        # Initialize
        tree_output = []

        # Get data
        puts "Processing file: #{file}"
        tree = NewickTree.fromFile(file)
        tree = tree.add_dna_sequences(phylip_data)

        # Midpoint root
        tree.set_edge_length!.midpointRoot


        # Original sorting of sites
        # Get accumulated distance between consecutive sites
        total_distance = 0
        partitions.each do |partition|
          partition.sites.first(partition.sites.size - 1).each do |site|
            total_distance += tree.ml_operations!([site, site + 1])[:op_optimized]
          end
        end
        tree_output << {batch: batch_name, tree: file, distance: total_distance, sort: "original"}

        # Lexicographic sorting of sites
        tree.lexi_sort!(partitions)
        total_distance = 0
        # Get accumulated distance between consecutive sites
        partitions.each do |partition|
          partition.sites.first(partition.sites.size - 1).each do |site|
            total_distance += tree.ml_operations!([site, site + 1])[:op_optimized]
          end
        end
        tree_output << {batch: batch_name, tree: file, distance: total_distance, sort: "lxi"}

        tree_output
      end
    end


    program_runtime = (Time.now - start_time).duration

    # Check if output folder exists
    output_directory = "./output_#{File.basename(__FILE__, '.rb')}"
    FileUtils.mkdir_p(output_directory)

    # Output results to CSV for R
    data_file = "#{output_directory}/#{start_time.strftime '%Y-%m-%d %H-%M-%S'} data.csv"
    puts "Writing data to #{data_file}"
    csv_output.flatten.array_of_hashes_to_csv_file(data_file)


    # Output parameters to CSV for R
    program_parameters_output = {phylip_file: phylip_file, sample_root: sample_root, sample_trees: options[:sample_trees],
                                 program_runtime: program_runtime, data_file: data_file,
                                 graph_file_name: graph_file_name
    }

    parameter_file = "#{output_directory}/#{start_time.strftime '%Y-%m-%d %H-%M-%S'} parameters.csv"
    program_parameters_output.to_csv_file(parameter_file)
    puts "Program parameters written to #{parameter_file}"
    puts "Run corresponding R script '#{File.basename(__FILE__, '.rb')}.R' to generate graphs"

    puts "Program finished at #{Time.now}. Runtime: #{program_runtime}"


  end

end

Sorting.start
